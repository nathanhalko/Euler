


/*
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n-1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n-1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
*/


object Prob045 {

/* -ljr
 *
 * This probably takes more experience to see but you can use Iterators to hide a bunch of your while-loop complexity.
 *
 *   def genTri(n: Int): Iterator[Int] = new Iterator {
 *     private var c = n
 *     def tri(n: Int): Int = (n*(n+1))/2
 *     def hasNext: Boolean = true
 *     def next: Int = { c += 1; tri(c) }
 *     def value: Int = tri(c)
 *     def index: Int = c
 *   }
 *   def genPent(...
 *   def genHex(...
 *
 *   def main() {
 *     // T_285 == P_165 == H_143
 *     val triIter = genTri(285)
 *     val pentIter = genPent(165)
 *     val hexIter = genHex(143)
 *
 *     var a = 1
 *     var b = 0
 *     var c = 0
 *
 *     while ( !(a == b && b == c) ) {
 *       a = triIter.next
 *       while (a > pentIter.next) {}
 *       while (a > hexIter.next) {}
 *       b = pentIter.value
 *       c = hexIter.value
 *    }
 *  ...
 *  }
 *
 * It's not so much that it's less code but each "paragraph" is easier to read and comprehend (and eyeball for bugs).
 * This code also does a better job at highlighting the finish condition you are after.
 */

  def main(args: Array[String]) {

    def tri(n:Int)  = (n*(n+1))/2
    def pent(n:Int) = (n*(3*n-1))/2
    def hex(n:Int)  = n*(2*n-1)

    println("Verify that tri(285) = %d = pent(165) = %d = hex(143) = %d".format(tri(285),pent(165),hex(143)))

    var foundIt = false
    var n = 10 //144
    val h = hex(n)
    var k = 1
    val pk = pent(k)
    var j = 1
    val tj = tri(j)


    while (!foundIt) {
      val h = hex(n)
       println("h = "+h)

      while (pk <= h) {
        if (pk != h) {
          k += 1
          val pk = pent(k)
          println("pk = "+pk)
        }
        else {

          while (tj <= h) {
            if (tj != h) {
              j += 1
              val tj = tri(j)
              println("tj = "+tj)
            }
            else foundIt = true
          }
        }
      }
      n += 1
    }

    println("tri(%d) = pent(%d) = hex(%d) = %d".format(j,k,n,h))
  }
}
